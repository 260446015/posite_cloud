<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>ViKey--API测试</title>
<link href="ViKeyTest.css" rel="stylesheet" type="text/css">
<script src="ViKeyInterface.js"></script>
<script src="jquery-3.3.1.min.js"></script>
<script language="JavaScript">
var ViKeyInterface;
var bHasInstallVikey = 0;


function IsInstallVikey()
{
	if(bHasInstallVikey == 0)
	{
		alert("尚未安装插件，或插件尚未正常运行");
	}
	else
	{
		var FM = window.document.ViKeyForm;
		FM.edtResult.value="插件工作正常";
	}
}

window.onload = function() 
{
	var strSocketResult;
	ViKeyInterface=new ViKeySocketInterface(); //创建UK类

	ViKeyInterface.ViKeySocket.onmessage = function(msg)
	{
		var FM = window.document.ViKeyForm;
		var ReceiveJsonData = JSON.parse(msg.data);
		
		if(ReceiveJsonData.FunctionType == "VikeyFind")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				FM.edtResult.value="已找到ViKey加密锁数量：" + ReceiveJsonData.Count;
			}
			else
			{
				FM.edtResult.value="查找失败 ERRORCODE："+ ReceiveJsonData.ErrorCode;
			}
		}
		else if(ReceiveJsonData.FunctionType == "CheckInstall")
		{
			//alert("CheckInstall");
			if(ReceiveJsonData.ErrorCode == 0)
			{
				bHasInstallVikey = 1;
				//IsInstallVikey();
			}	
		}
		else if(ReceiveJsonData.FunctionType == "GetVersion")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				//alert("插件版本：");
				FM.edtResult.value="插件版本： " + ReceiveJsonData.Version;	
			}
			else
			{
				FM.edtResult.value="插件版本失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyGetHID")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				FM.edtResult.value="获取硬件序列号成功,硬件 " + ReceiveJsonData.HID;	
				FM.etdNTID.value = ReceiveJsonData.HID;
			}
			else
			{
				FM.edtResult.value="获取硬件序列号失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyGetType")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				//FM.edtResult.value="获取加密狗型号成功, " + ReceiveJsonData.ViKeyType;	
			}
			else
			{
				//FM.edtResult.value="获取加密狗型号失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyGetLevel")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				//FM.edtResult.value="获取加密狗当前权限成功, " + ReceiveJsonData.ViKeyLevel;				
			}
			else
			{
				//FM.edtResult.value="获取加密狗当前权限失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyGetPtroductName")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				//FM.edtResult.value="获取加密狗设备名称成功, " + ReceiveJsonData.PtroductName;				
			}
			else
			{
				//FM.edtResult.value="获取加密狗设备名称失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyUserLogin")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				FM.edtResult.value="用户登录成功";					
			}
			else
			{
				FM.edtResult.value="用户权限登陆失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyAdminLogin")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				FM.edtResult.value="管理员权限登陆成功";
			}
			else
			{
				FM.edtResult.value="管理员权限登陆失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeySetSoftIDString")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				FM.edtResult.value="设置软件ID成功: " + FM.EditSetSoftID.value;				
			}
			else
			{
				FM.edtResult.value="设置软件ID失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyGetSoftIDString")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				FM.EditGetSoftID.value = ReceiveJsonData.SoftIDString;	
				FM.edtResult.value="读取软件ID成功: " + FM.EditGetSoftID.value;				
			}
			else
			{
				FM.edtResult.value="获取软件ID失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyReadData")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				
				FM.edtResult.value="读取数据成功: " +  ReceiveJsonData.Data;
				$.ajax({
            url: "/login",
            type: "post",
			data: {
                password: ReceiveJsonData.Data
                
            },
            xhrFields: {
                withCredentials: true
            },
           
            success: function (res) {
                console.log(res);
                if (res.code != 0) {
                    return layer.msg(res.message, {anim: 6});
                }
                sessionStorage.setItem("zdryscuser", JSON.stringify(res.data));
                window.location = "loginsuccess.htm";
            }
        });
				
				
				
			}
			else
			{
				FM.edtResult.value="从加密狗中读取数据失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyWriteData")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				FM.edtResult.value="写入数据成功: " + 	FM.EditWriteData.value;
			}
			else
			{
				FM.edtResult.value="向加密狗中写入数据失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "Vikey3DesSetKey")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				//FM.edtResult.value="设置3DES加解密算法密钥成功" ;	
			}
			else
			{
				//FM.edtResult.value="设置3DES加解密算法密钥失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "Vikey3DesEncrypt")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				FM.edtResult.value="3DES加密生成密文："+ReceiveJsonData.Result;		
			}
			else
			{
				FM.edtResult.value="3DES加密失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "Vikey3DesDecrypt")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				FM.edtResult.value="3DES解密生成密文："+ReceiveJsonData.Result;		
			}
			else
			{
				FM.edtResult.value="3DES解密失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyDesSetKey")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				//FM.edtResult.value="设置DES加解密算法密钥成功" ;	
			}
			else
			{
				//FM.edtResult.value="设置DES加解密算法密钥失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyDesEncrypt")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				//FM.edtResult.value="DES加密成功"  + ReceiveJsonData.Result;	
			}
			else
			{
				//FM.edtResult.value="DES加密失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyDesDecrypt")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				//FM.edtResult.value="DES解密成功"  + ReceiveJsonData.Result;	
			}
			else
			{
				//FM.edtResult.value="3DES解密失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeySetAutoRunUrl")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				//FM.edtResult.value="设置自动打开网址成功";	
			}
			else
			{
				//FM.edtResult.value="设置自动打开网址失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyMD5")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				//FM.edtResult.value="计算MD5哈希数据成功"  + ReceiveJsonData.Result;	
			}
			else
			{
				//FM.edtResult.value="计算MD5哈希数据失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeySetMD5Key")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				FM.edtResult.value="设置HMAC_MD5算法Key成功";	
			}
			else
			{
				FM.edtResult.value="设置HMAC_MD5算法Key失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyHmacMD5")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				FM.edtResult.value="HMAC-MD5计算成功:"+ReceiveJsonData.Result;
				FM.edtMD5Result.value = ReceiveJsonData.Result;
			}
			else
			{
				FM.edtResult.value="计算HMAC_MD5哈希数据失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeySHA1")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				//FM.edtResult.value="计算SHA1哈希数据成功"  + ReceiveJsonData.Result;	
			}
			else
			{
				//FM.edtResult.value="计算SHA1哈希数据失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeySetSHA1Key")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				//FM.edtResult.value="设置HMAC_SHA1算法Key成功";	
			}
			else
			{
				//FM.edtResult.value="设置HMAC_SHA1算法Key失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
		else if(ReceiveJsonData.FunctionType == "VikeyHmacSHA1")
		{
			if(ReceiveJsonData.ErrorCode == 0)
			{
				//FM.edtResult.value="设置HMAC_SHA1哈希数据成功"  + ReceiveJsonData.Result;	
			}
			else
			{
				//FM.edtResult.value="设置HMAC_SHA1哈希数据失败 ERRORCODE：" + ReceiveJsonData.ErrorCode;	
			}			
		}
				
			
	};
}

function CheckInstall()    //检测控件安装
{   
	bHasInstallVikey = 0;
	ViKeyInterface.CheckInstall();
	setTimeout( function(){IsInstallVikey();}, 500);
}

function GetVersion()    //查找加密锁
{   
	ViKeyInterface.GetVersion();
}

function ViKeyFind()    //查找加密锁
{   
	ViKeyInterface.FindViKey();
}

function ViKeyHID()   //获取硬件序列号
{
	var ViKeyIndex = 0;
	ViKeyInterface.VikeyGetHID(ViKeyIndex);
}

function ViKeyUserLogon()   //以用户权限登录
{
	var FM = window.document.ViKeyForm;
	var ViKeyIndex = 0;	
	ViKeyInterface.VikeyUserLogin(ViKeyIndex, FM.UserPin2.value);
}

function ViKeyAdminLogon()   //以管理员权限登录
{
	var FM = window.document.ViKeyForm;
	var ViKeyIndex = 0;	
	ViKeyInterface.VikeyAdminLogin(ViKeyIndex, FM.AdminPin2.value);
}

function ViKeySetSoftID()   //设置软件ID
{
	var FM = window.document.ViKeyForm;
	var ViKeyIndex = 0;	
	ViKeyInterface.VikeySetSoftIDString(ViKeyIndex, FM.EditSetSoftID.value);
}

function ViKeyGetSoftID()   //获取软件ID
{
	var ViKeyIndex = 0;	
	ViKeyInterface.VikeyGetSoftIDString(ViKeyIndex);
}

function ViKeyWriteData()   //写数据到ViKey
{
	var FM = window.document.ViKeyForm;
	var ViKeyIndex = 0;	
	var Addr = 0;
	var Length = 32;
	ViKeyInterface.VikeyWriteData(ViKeyIndex, Addr, Length, FM.EditWriteData.value);
}

function ViKeyReadData()   //从ViKey中读取数据
{
	var FM = window.document.ViKeyForm;
	var ViKeyIndex = 0;	
	var Addr = 0;
	var Length = 32;
	
	ViKeyInterface.VikeyReadData(ViKeyIndex, Addr, Length);
}

function ViKeySetMd5Key() //设置MD5的Key
{
	var FM = window.document.ViKeyForm;
	var ViKeyIndex = 0;	
	
	ViKeyInterface.VikeySetMD5Key(ViKeyIndex, FM.EditMD5Key.value);	
}

function VikeyHmacMD5()   //计算MD5值
{
	var FM = window.document.ViKeyForm;
	var ViKeyIndex = 0;	
	var Length = 32;
	
	ViKeyInterface.VikeyHmacMD5(ViKeyIndex, Length, FM.edtMD5Text.value);

	if(ViKeyInterface.IViKeyGetError() ==0)	
	{
		FM.edtResult.value="HMAC-MD5计算成功";
		FM.edtMD5Result.value=buffer;
	}
	else
	{
		FM.edtResult.value="HMAC-计算失败 ERRORCODE："+ ViKeyInterface.IViKeyGetError();	
	}
}
function Des3Encrypt()   //3Des加密
{
	var FM = window.document.ViKeyForm;
	var ViKeyIndex = 0;
	
	if(FM.edtDesEncrypt.value.length != 24)
	{	
		alert("加密长度必须为24个字符");
	}
	else
	{
		ViKeyInterface.Vikey3DesEncrypt(ViKeyIndex, 24, FM.edtDesEncrypt.value);
	}
}

function Des3Decrypt()   //3Des解密
{
	var FM = window.document.ViKeyForm;
	var ViKeyIndex = 0;
	if( FM.edtDesDecrypt.value.length != 48)
	{	
		alert("解密长度必须为48个16进制字符");
	}
	else
	{
		ViKeyInterface.Vikey3DesDecrypt(ViKeyIndex, 48, FM.edtDesDecrypt.value);
	}
}

</script>
</head>
<body>
<div align="center">
              <span class="blue01">ViKey API测试</span>
			  <form action="" name="ViKeyForm" id="ViKeyForm">
			  <input name="btnFind" type="button" class="ctbottom" id="btnFind" value=" 查  找 " onClick="ViKeyFind();">
			  <input name="btnGetData" type="button" class="ctbottom" id="btnGetData" value="读取数据" onClick="ViKeyReadData();">
<input name="edtResult" type="text" id="edtResult" size="35">
</form>
</div>
     
</body>
</html>
